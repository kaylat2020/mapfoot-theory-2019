#BlueJ class context
comment0.target=MyWorld
comment0.text=\r\n\ Displays\ a\ (technically\ incorrect)\ map\ of\ the\ world.\r\n\ @author\ tuckerka20\r\n\ @version\ 5/23/19\r\n
comment1.params=
comment1.target=MyWorld()
comment10.params=
comment10.target=void\ minSpan2()
comment10.text=\r\n\ Kruskal's\ algorithm.\r\n
comment11.params=
comment11.target=void\ shortestPath()
comment11.text=\r\n\ Dijkstra's\ algorithm.\r\n
comment2.params=
comment2.target=java.util.HashSet\ getEdges()
comment3.params=amount
comment3.target=void\ fill(int)
comment3.text=\r\n\ Builds\ amount\ of\ Locations\ on\ blue\ parts\ of\ the\ map.\r\n\ @param\ amount\r\n
comment4.params=
comment4.target=void\ completeGraph()
comment4.text=\r\n\ Connects\ every\ location\ to\ each\ other.\r\n
comment5.params=n
comment5.target=void\ buildRandomConnections(int)
comment5.text=\r\n\ Builds\ n\ edges\ on\ the\ map.\r\n\ @param\ n\r\n
comment6.params=
comment6.target=boolean\ hasCycle()
comment6.text=\r\n\ Searches\ for\ any\ existing\ cycles\ in\ the\ graph.\r\n\ @return\ true\ if\ a\ cycle\ is\ found,\ false\ if\ no\ cycles\ are\ possible.\r\n
comment7.params=e
comment7.target=boolean\ formsCycle(Edge)
comment7.text=\r\n\ Determines\ if\ a\ single\ edge\ would\ complete\ a\ cycle.\r\n\ @param\ allEdges\r\n\ @param\ e\r\n\ @return\ true\ if\ a\ cycle\ (that\ contains\ edge\ e)\ is\ possible\r\n\ \ after\ the\ edge\ is\ created,\ false\ otherwise\r\n
comment8.params=edges
comment8.target=void\ drawEdges(java.util.List)
comment9.params=
comment9.target=void\ minSpan1()
comment9.text=\r\n\ Prim's\ algorithm.\r\n\ minimum\ spanning\ tree.\r\n
numComments=12
